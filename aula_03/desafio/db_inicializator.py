import sqlite3
from database_repository import DatabateRepository
from requests import get
from bs4 import BeautifulSoup
import re

class DataBaseInitialize(DatabateRepository):
    """Class that starts the database, creating the tables."""

    @staticmethod
    def create_table(db_name: str):
        """Create the database tables.
        
        Args:
            db_name (str): Name of the database.
        """

        connection = sqlite3.connect(db_name)
        cursor = connection.cursor()
        cursor.executescript("""
            CREATE TABLE IF NOT EXISTS pokemons (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                type TEXT NOT NULL,
                hp INTEGER NOT NULL
            );

            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user TEXT UNIQE NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL
            );
            
            CREATE TABLE IF NOT EXISTS attacks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                type TEXT NOT NULL,
                power INT DEFAULT 0,
                accuracy INT DEFAULT 0,
                cooldown INT NOT NULL
            );

            CREATE TABLE IF NOT EXISTS pokemon_attacks (
                pokemon_id INTEGER,
                attack_id INTEGER,
                level INTEGER DEFAULT 0,
                PRIMARY KEY (pokemon_id, attack_id),
                FOREIGN KEY (pokemon_id) REFERENCES pokemons(id),
                FOREIGN KEY (attack_id) REFERENCES attacks(id)
            );
            
            CREATE TABLE IF NOT EXISTS battle_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pokemon_1_id INTEGER NOT NULL,
                pokemon_2_id INTEGER NOT NULL,
                winner INTEGER NOT NULL,
                timestamp TEXT NOT NULL,
                rounds INTEGER NOT NULL,
                FOREIGN KEY (pokemon_1_id) REFERENCES pokemons(id),
                FOREIGN KEY (pokemon_2_id) REFERENCES pokemons(id)
            );
                             
            CREATE TABLE IF NOT EXISTS user_pokemon (
                user_id INTEGER,
                pokemon_id INTEGER,
                level INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, pokemon_id),
                FOREIGN KEY (pokemon_id) REFERENCES pokemons(id),        
                FOREIGN KEY (user_id) REFERENCES users(id)        
            )
            """)

        connection.commit()
        connection.close()
    
    @staticmethod
    def insert_default_data(db_name: str):
        """Insert default data into the tables created to the game's database.
        
        Args:
            db_name (str): Name of the database.
        """

        connection = sqlite3.connect(db_name)
        cursor = connection.cursor()
        cursor.executescript(f"""
            
            {DataBaseInitialize.get_pokemon_from_url()}
            
            {DataBaseInitialize.get_attacks_from_url()}
            
            {DataBaseInitialize.get_pokemon_attacks_from_url()}
                             
            INSERT INTO users (user, email, password) VALUES
                ('gabriel.sl', 'gabriel@email.com', '1234'),
                ('amanda.bv', 'amanda@email.com', '1234');
            
            INSERT INTO user_pokemon (user_id, pokemon_id, level) VALUES
                (1, 1, 0),
                (1, 3, 1),
                (1, 4, 0),
                (1, 9, 0),
                (2, 2, 1),
                (2, 5, 2),
                (2, 6, 0),
                (2, 8, 0);
            
            """)
        
    def get_pokemon_from_url():
        
        url = "https://pokemondb.net/pokedex/all"

        response = get(url)

        soup = BeautifulSoup(response.content, "html.parser")

        table = soup.find_all(id="pokedex")[0]

        rows = table.find_all("tr")

        dictionary = {}
        header = rows[0]
        for row in rows[1:]:
            
            row_td = row.find_all("td")
            
            # Find ID
            id = int(row_td[0].attrs["data-sort-value"])
            if id > 151:
                break
            if id not in dictionary.keys():

                # Find Name
                name = re.sub(r'\s+', ' ', row_td[1].text)

                # Find types
                # types = []
                # types_html = row_td[2].find_all("a")
                # for type in types_html:
                #     types.append(type.text)
                type = row_td[2].find_all("a")[0].text
                # print(f"pokemon: {name}")
                #Find HP
                hp = int(row_td[4].text)
                
                dictionary[id] = {"name": name, "types": type, "hp": hp}
                
        query = "INSERT INTO pokemons (id, name, type, hp) VALUES "

        for key, value in dictionary.items():
            id = key
            name = value['name'].replace("'", "''")
            types = value['types']
            hp = value['hp']
            
            query += f"({id}, '{name}', '{types}', {hp}),\n"

        query = f"{query[0:-2]};"        
        return query
    
    def get_pokemon_attacks_from_url():

        url_moves = "https://pokemondb.net/move/generation/1"
        response_moves = get(url_moves)
        soup_moves = BeautifulSoup(response_moves.content, "html.parser")

        table = soup_moves.find_all("table")[0]
        rows = table.find_all("tr")

        dict = {}

        for index_attack, row in enumerate(rows[1:]):
            cells = row.find_all("td")
            if len(cells) > 0:
                # move_name = cells[0].text.strip()
                # print(move_name)
                # dict[index_attack + 1] = []
                # move_type = cells[1].text.strip()
                # move_power = cells[3].text.strip()
                # move_pp = cells[5].text.strip()
                url_attack = "https://pokemondb.net" + cells[0].contents[0].attrs['href']

                response_pokemon = get(url_attack)
                soup_pokemon = BeautifulSoup(response_pokemon.content, "html.parser")
                
                nav_bar = soup_pokemon.find_all(class_="panel-nav")[0]

                if "Learnt by level up" not in nav_bar.text:
                    continue
                
                try:
                    pokemon_board = soup_pokemon.find_all(class_="infocard-list-pkmn-md")[0]
                except:
                    continue

                dict[index_attack + 1] = {"pokemon": [], "level": []}
                pokemons = pokemon_board.find_all(class_="infocard")
                for pokemon_html in pokemons:
                    pokemon_text = pokemon_html.find_all(class_="text-muted")
                    
                    for i in pokemon_text:
                        if "#" in i.text:
                            match = re.search(r'#(\d+)', i.text)
                            id = int(match.group(1))
                            if id in dict[index_attack + 1]["pokemon"] or id > 151:
                                break
                            
                            dict[index_attack + 1]["pokemon"].append(id)
                        if "Level" in i.text:
                            match = re.search(r'(\d+)', i.text)
                            level = int(match.group(1))
                            dict[index_attack + 1]["level"].append(level)

        query = "INSERT INTO pokemon_attacks (attack_id, pokemon_id, level) VALUES "

        for attack_id, poke_level in dict.items():
            for index, value in enumerate(poke_level['pokemon']):
                pokemon_id = poke_level['pokemon'][index]
                level = poke_level['level'][index]
                query += f"({attack_id}, {pokemon_id}, {level}), \n"

        query = f"{query[0:-3]};"
        return query
    
    def get_attacks_from_url():
        with open("move_list.html", "r", encoding="utf-8") as file:
            html_content = file.read()

        url_moves = "https://pokemondb.net/move/generation/1"
        response_moves = get(url_moves)
        # soup_moves = BeautifulSoup(html_content, "html.parser")
        soup_moves = BeautifulSoup(response_moves.content, "html.parser")

        table = soup_moves.find_all("table")[0]
        rows = table.find_all("tr")

        # moves_dict = {}
        query = "INSERT INTO attacks (id, name, type, power, accuracy, cooldown) VALUES "

        for index_attack, row in enumerate(rows[1:]):
            cells = row.find_all("td")
            if len(cells) > 0:
                try:
                    move_power = int(cells[3].text.strip())
                except:
                    move_power = 0
                move_name = re.sub(r'\s+', ' ', cells[0].text.strip().replace("\n", " "))
                try:
                    move_accuracy = int(cells[4].text.strip())
                except:
                    move_accuracy = 0
                move_type = cells[1].text.strip()

                if move_power >= 200:
                    cooldown = 8
                elif move_power >= 150:
                    cooldown = 6
                elif move_power >= 100:
                    cooldown = 5
                elif move_power >= 80:
                    cooldown = 4
                elif move_power >= 50:
                    cooldown = 3
                elif move_power >= 40:
                    cooldown = 2
                elif move_power >= 30:
                    cooldown = 1
                else:
                    cooldown = 0

            query += (f"({index_attack + 1}, '{move_name}', '{move_type}', {move_power}, {move_accuracy}, {cooldown}),\n")

        query = query[0:-2] + ";"
        return query



# Alternative SQL script to input data into pokemons, attacks, and pokemons_attacks
# INSERT INTO pokemons (id, name, type, hp) VALUES (1, 'Bulbasaur', 'Grass', 45),
# (2, 'Ivysaur', 'Grass', 60),
# (3, 'Venusaur', 'Grass', 80),
# (4, 'Charmander', 'Fire', 39),
# (5, 'Charmeleon', 'Fire', 58),
# (6, 'Charizard', 'Fire', 78),
# (7, 'Squirtle', 'Water', 44),
# (8, 'Wartortle', 'Water', 59),
# (9, 'Blastoise', 'Water', 79),
# (10, 'Caterpie', 'Bug', 45),
# (11, 'Metapod', 'Bug', 50),
# (12, 'Butterfree', 'Bug', 60),
# (13, 'Weedle', 'Bug', 40),
# (14, 'Kakuna', 'Bug', 45),
# (15, 'Beedrill', 'Bug', 65),
# (16, 'Pidgey', 'Normal', 40),
# (17, 'Pidgeotto', 'Normal', 63),
# (18, 'Pidgeot', 'Normal', 83),
# (19, 'Rattata', 'Normal', 30),
# (20, 'Raticate', 'Normal', 55),
# (21, 'Spearow', 'Normal', 40),
# (22, 'Fearow', 'Normal', 65),
# (23, 'Ekans', 'Poison', 35),
# (24, 'Arbok', 'Poison', 60),
# (25, 'Pikachu', 'Electric', 35),
# (26, 'Raichu', 'Electric', 60),
# (27, 'Sandshrew', 'Ground', 50),
# (28, 'Sandslash', 'Ground', 75),
# (29, 'Nidoran♀', 'Poison', 55),
# (30, 'Nidorina', 'Poison', 70),
# (31, 'Nidoqueen', 'Poison', 90),
# (32, 'Nidoran♂', 'Poison', 46),
# (33, 'Nidorino', 'Poison', 61),
# (34, 'Nidoking', 'Poison', 81),
# (35, 'Clefairy', 'Fairy', 70),
# (36, 'Clefable', 'Fairy', 95),
# (37, 'Vulpix', 'Fire', 38),
# (38, 'Ninetales', 'Fire', 73),
# (39, 'Jigglypuff', 'Normal', 115),
# (40, 'Wigglytuff', 'Normal', 140),
# (41, 'Zubat', 'Poison', 40),
# (42, 'Golbat', 'Poison', 75),
# (43, 'Oddish', 'Grass', 45),
# (44, 'Gloom', 'Grass', 60),
# (45, 'Vileplume', 'Grass', 75),
# (46, 'Paras', 'Bug', 35),
# (47, 'Parasect', 'Bug', 60),
# (48, 'Venonat', 'Bug', 60),
# (49, 'Venomoth', 'Bug', 70),
# (50, 'Diglett', 'Ground', 10),
# (51, 'Dugtrio', 'Ground', 35),
# (52, 'Meowth', 'Normal', 40),
# (53, 'Persian', 'Normal', 65),
# (54, 'Psyduck', 'Water', 50),
# (55, 'Golduck', 'Water', 80),
# (56, 'Mankey', 'Fighting', 40),
# (57, 'Primeape', 'Fighting', 65),
# (58, 'Growlithe', 'Fire', 55),
# (59, 'Arcanine', 'Fire', 90),
# (60, 'Poliwag', 'Water', 40),
# (61, 'Poliwhirl', 'Water', 65),
# (62, 'Poliwrath', 'Water', 90),
# (63, 'Abra', 'Psychic', 25),
# (64, 'Kadabra', 'Psychic', 40),
# (65, 'Alakazam', 'Psychic', 55),
# (66, 'Machop', 'Fighting', 70),
# (67, 'Machoke', 'Fighting', 80),
# (68, 'Machamp', 'Fighting', 90),
# (69, 'Bellsprout', 'Grass', 50),
# (70, 'Weepinbell', 'Grass', 65),
# (71, 'Victreebel', 'Grass', 80),
# (72, 'Tentacool', 'Water', 40),
# (73, 'Tentacruel', 'Water', 80),
# (74, 'Geodude', 'Rock', 40),
# (75, 'Graveler', 'Rock', 55),
# (76, 'Golem', 'Rock', 80),
# (77, 'Ponyta', 'Fire', 50),
# (78, 'Rapidash', 'Fire', 65),
# (79, 'Slowpoke', 'Water', 90),
# (80, 'Slowbro', 'Water', 95),
# (81, 'Magnemite', 'Electric', 25),
# (82, 'Magneton', 'Electric', 50),
# (83, 'Farfetch''d', 'Normal', 52),
# (84, 'Doduo', 'Normal', 35),
# (85, 'Dodrio', 'Normal', 60),
# (86, 'Seel', 'Water', 65),
# (87, 'Dewgong', 'Water', 90),
# (88, 'Grimer', 'Poison', 80),
# (89, 'Muk', 'Poison', 105),
# (90, 'Shellder', 'Water', 30),
# (91, 'Cloyster', 'Water', 50),
# (92, 'Gastly', 'Ghost', 30),
# (93, 'Haunter', 'Ghost', 45),
# (94, 'Gengar', 'Ghost', 60),
# (95, 'Onix', 'Rock', 35),
# (96, 'Drowzee', 'Psychic', 60),
# (97, 'Hypno', 'Psychic', 85),
# (98, 'Krabby', 'Water', 30),
# (99, 'Kingler', 'Water', 55),
# (100, 'Voltorb', 'Electric', 40),
# (101, 'Electrode', 'Electric', 60),
# (102, 'Exeggcute', 'Grass', 60),
# (103, 'Exeggutor', 'Grass', 95),
# (104, 'Cubone', 'Ground', 50),
# (105, 'Marowak', 'Ground', 60),
# (106, 'Hitmonlee', 'Fighting', 50),
# (107, 'Hitmonchan', 'Fighting', 50),
# (108, 'Lickitung', 'Normal', 90),
# (109, 'Koffing', 'Poison', 40),
# (110, 'Weezing', 'Poison', 65),
# (111, 'Rhyhorn', 'Ground', 80),
# (112, 'Rhydon', 'Ground', 105),
# (113, 'Chansey', 'Normal', 250),
# (114, 'Tangela', 'Grass', 65),
# (115, 'Kangaskhan', 'Normal', 105),
# (116, 'Horsea', 'Water', 30),
# (117, 'Seadra', 'Water', 55),
# (118, 'Goldeen', 'Water', 45),
# (119, 'Seaking', 'Water', 80),
# (120, 'Staryu', 'Water', 30),
# (121, 'Starmie', 'Water', 60),
# (122, 'Mr. Mime', 'Psychic', 40),
# (123, 'Scyther', 'Bug', 70),
# (124, 'Jynx', 'Ice', 65),
# (125, 'Electabuzz', 'Electric', 65),
# (126, 'Magmar', 'Fire', 65),
# (127, 'Pinsir', 'Bug', 65),
# (128, 'Tauros', 'Normal', 75),
# (129, 'Magikarp', 'Water', 20),
# (130, 'Gyarados', 'Water', 95),
# (131, 'Lapras', 'Water', 130),
# (132, 'Ditto', 'Normal', 48),
# (133, 'Eevee', 'Normal', 55),
# (134, 'Vaporeon', 'Water', 130),
# (135, 'Jolteon', 'Electric', 65),
# (136, 'Flareon', 'Fire', 65),
# (137, 'Porygon', 'Normal', 65),
# (138, 'Omanyte', 'Rock', 35),
# (139, 'Omastar', 'Rock', 70),
# (140, 'Kabuto', 'Rock', 30),
# (141, 'Kabutops', 'Rock', 60),
# (142, 'Aerodactyl', 'Rock', 80),
# (143, 'Snorlax', 'Normal', 160),
# (144, 'Articuno', 'Ice', 90),
# (145, 'Zapdos', 'Electric', 90),
# (146, 'Moltres', 'Fire', 90),
# (147, 'Dratini', 'Dragon', 41),
# (148, 'Dragonair', 'Dragon', 61),
# (149, 'Dragonite', 'Dragon', 91),
# (150, 'Mewtwo', 'Psychic', 106),
# (151, 'Mew', 'Psychic', 100);

# INSERT INTO attacks (id, name, type, power, accuracy, cooldown) VALUES (1, 'Absorb', 'Grass', 20, 100, 0),
# (2, 'Acid', 'Poison', 40, 100, 2),
# (3, 'Acid Armor', 'Poison', 0, 0, 0),
# (4, 'Agility', 'Psychic', 0, 0, 0),
# (5, 'Amnesia', 'Psychic', 0, 0, 0),
# (6, 'Aurora Beam', 'Ice', 65, 100, 3),
# (7, 'Barrage', 'Normal', 15, 85, 0),
# (8, 'Barrier', 'Psychic', 0, 0, 0),
# (9, 'Bide', 'Normal', 0, 0, 0),
# (10, 'Bind', 'Normal', 15, 85, 0),
# (11, 'Bite', 'Dark', 60, 100, 3),
# (12, 'Blizzard', 'Ice', 110, 70, 5),
# (13, 'Body Slam', 'Normal', 85, 100, 4),
# (14, 'Bone Club', 'Ground', 65, 85, 3),
# (15, 'Bonemerang', 'Ground', 50, 90, 3),
# (16, 'Bubble', 'Water', 40, 100, 2),
# (17, 'Bubble Beam', 'Water', 65, 100, 3),
# (18, 'Clamp', 'Water', 35, 85, 1),
# (19, 'Comet Punch', 'Normal', 18, 85, 0),
# (20, 'Confuse Ray', 'Ghost', 0, 100, 0),
# (21, 'Confusion', 'Psychic', 50, 100, 3),
# (22, 'Constrict', 'Normal', 10, 100, 0),
# (23, 'Conversion', 'Normal', 0, 0, 0),
# (24, 'Counter', 'Fighting', 0, 100, 0),
# (25, 'Crabhammer', 'Water', 100, 90, 5),
# (26, 'Cut', 'Normal', 50, 95, 3),
# (27, 'Defense Curl', 'Normal', 0, 0, 0),
# (28, 'Dig', 'Ground', 80, 100, 4),
# (29, 'Disable', 'Normal', 0, 100, 0),
# (30, 'Dizzy Punch', 'Normal', 70, 100, 3),
# (31, 'Double Kick', 'Fighting', 30, 100, 1),
# (32, 'Double Slap', 'Normal', 15, 85, 0),
# (33, 'Double Team', 'Normal', 0, 0, 0),
# (34, 'Double-Edge', 'Normal', 120, 100, 5),
# (35, 'Dragon Rage', 'Dragon', 0, 100, 0),
# (36, 'Dream Eater', 'Psychic', 100, 100, 5),
# (37, 'Drill Peck', 'Flying', 80, 100, 4),
# (38, 'Earthquake', 'Ground', 100, 100, 5),
# (39, 'Egg Bomb', 'Normal', 100, 75, 5),
# (40, 'Ember', 'Fire', 40, 100, 2),
# (41, 'Explosion', 'Normal', 250, 100, 8),
# (42, 'Fire Blast', 'Fire', 110, 85, 5),
# (43, 'Fire Punch', 'Fire', 75, 100, 3),
# (44, 'Fire Spin', 'Fire', 35, 85, 1),
# (45, 'Fissure', 'Ground', 0, 30, 0),
# (46, 'Flamethrower', 'Fire', 90, 100, 4),
# (47, 'Flash', 'Normal', 0, 100, 0),
# (48, 'Fly', 'Flying', 90, 95, 4),
# (49, 'Focus Energy', 'Normal', 0, 0, 0),
# (50, 'Fury Attack', 'Normal', 15, 85, 0),
# (51, 'Fury Swipes', 'Normal', 18, 80, 0),
# (52, 'Glare', 'Normal', 0, 100, 0),
# (53, 'Growl', 'Normal', 0, 100, 0),
# (54, 'Growth', 'Normal', 0, 0, 0),
# (55, 'Guillotine', 'Normal', 0, 30, 0),
# (56, 'Gust', 'Flying', 40, 100, 2),
# (57, 'Harden', 'Normal', 0, 0, 0),
# (58, 'Haze', 'Ice', 0, 0, 0),
# (59, 'Headbutt', 'Normal', 70, 100, 3),
# (60, 'High Jump Kick', 'Fighting', 130, 90, 5),
# (61, 'Horn Attack', 'Normal', 65, 100, 3),
# (62, 'Horn Drill', 'Normal', 0, 30, 0),
# (63, 'Hydro Pump', 'Water', 110, 80, 5),
# (64, 'Hyper Beam', 'Normal', 150, 90, 6),
# (65, 'Hyper Fang', 'Normal', 80, 90, 4),
# (66, 'Hypnosis', 'Psychic', 0, 60, 0),
# (67, 'Ice Beam', 'Ice', 90, 100, 4),
# (68, 'Ice Punch', 'Ice', 75, 100, 3),
# (69, 'Jump Kick', 'Fighting', 100, 95, 5),
# (70, 'Karate Chop', 'Fighting', 50, 100, 3),
# (71, 'Kinesis', 'Psychic', 0, 80, 0),
# (72, 'Leech Life', 'Bug', 80, 100, 4),
# (73, 'Leech Seed', 'Grass', 0, 90, 0),
# (74, 'Leer', 'Normal', 0, 100, 0),
# (75, 'Lick', 'Ghost', 30, 100, 1),
# (76, 'Light Screen', 'Psychic', 0, 0, 0),
# (77, 'Lovely Kiss', 'Normal', 0, 75, 0),
# (78, 'Low Kick', 'Fighting', 0, 100, 0),
# (79, 'Meditate', 'Psychic', 0, 0, 0),
# (80, 'Mega Drain', 'Grass', 40, 100, 2),
# (81, 'Mega Kick', 'Normal', 120, 75, 5),
# (82, 'Mega Punch', 'Normal', 80, 85, 4),
# (83, 'Metronome', 'Normal', 0, 0, 0),
# (84, 'Mimic', 'Normal', 0, 0, 0),
# (85, 'Minimize', 'Normal', 0, 0, 0),
# (86, 'Mirror Move', 'Flying', 0, 0, 0),
# (87, 'Mist', 'Ice', 0, 0, 0),
# (88, 'Night Shade', 'Ghost', 0, 100, 0),
# (89, 'Pay Day', 'Normal', 40, 100, 2),
# (90, 'Peck', 'Flying', 35, 100, 1),
# (91, 'Petal Dance', 'Grass', 120, 100, 5),
# (92, 'Pin Missile', 'Bug', 25, 95, 0),
# (93, 'Poison Gas', 'Poison', 0, 90, 0),
# (94, 'Poison Powder', 'Poison', 0, 75, 0),
# (95, 'Poison Sting', 'Poison', 15, 100, 0),
# (96, 'Pound', 'Normal', 40, 100, 2),
# (97, 'Psybeam', 'Psychic', 65, 100, 3),
# (98, 'Psychic', 'Psychic', 90, 100, 4),
# (99, 'Psywave', 'Psychic', 0, 100, 0),
# (100, 'Quick Attack', 'Normal', 40, 100, 2),
# (101, 'Rage', 'Normal', 20, 100, 0),
# (102, 'Razor Leaf', 'Grass', 55, 95, 3),
# (103, 'Razor Wind', 'Normal', 80, 100, 4),
# (104, 'Recover', 'Normal', 0, 0, 0),
# (105, 'Reflect', 'Psychic', 0, 0, 0),
# (106, 'Rest', 'Psychic', 0, 0, 0),
# (107, 'Roar', 'Normal', 0, 0, 0),
# (108, 'Rock Slide', 'Rock', 75, 90, 3),
# (109, 'Rock Throw', 'Rock', 50, 90, 3),
# (110, 'Rolling Kick', 'Fighting', 60, 85, 3),
# (111, 'Sand Attack', 'Ground', 0, 100, 0),
# (112, 'Scratch', 'Normal', 40, 100, 2),
# (113, 'Screech', 'Normal', 0, 85, 0),
# (114, 'Seismic Toss', 'Fighting', 0, 100, 0),
# (115, 'Self-Destruct', 'Normal', 200, 100, 8),
# (116, 'Sharpen', 'Normal', 0, 0, 0),
# (117, 'Sing', 'Normal', 0, 55, 0),
# (118, 'Skull Bash', 'Normal', 130, 100, 5),
# (119, 'Sky Attack', 'Flying', 140, 90, 5),
# (120, 'Slam', 'Normal', 80, 75, 4),
# (121, 'Slash', 'Normal', 70, 100, 3),
# (122, 'Sleep Powder', 'Grass', 0, 75, 0),
# (123, 'Sludge', 'Poison', 65, 100, 3),
# (124, 'Smog', 'Poison', 30, 70, 1),
# (125, 'Smokescreen', 'Normal', 0, 100, 0),
# (126, 'Soft-Boiled', 'Normal', 0, 0, 0),
# (127, 'Solar Beam', 'Grass', 120, 100, 5),
# (128, 'Sonic Boom', 'Normal', 0, 90, 0),
# (129, 'Spike Cannon', 'Normal', 20, 100, 0),
# (130, 'Splash', 'Normal', 0, 0, 0),
# (131, 'Spore', 'Grass', 0, 100, 0),
# (132, 'Stomp', 'Normal', 65, 100, 3),
# (133, 'Strength', 'Normal', 80, 100, 4),
# (134, 'String Shot', 'Bug', 0, 95, 0),
# (135, 'Struggle', 'Normal', 50, 0, 3),
# (136, 'Stun Spore', 'Grass', 0, 75, 0),
# (137, 'Submission', 'Fighting', 80, 80, 4),
# (138, 'Substitute', 'Normal', 0, 0, 0),
# (139, 'Super Fang', 'Normal', 0, 90, 0),
# (140, 'Supersonic', 'Normal', 0, 55, 0),
# (141, 'Surf', 'Water', 90, 100, 4),
# (142, 'Swift', 'Normal', 60, 0, 3),
# (143, 'Swords Dance', 'Normal', 0, 0, 0),
# (144, 'Tackle', 'Normal', 40, 100, 2),
# (145, 'Tail Whip', 'Normal', 0, 100, 0),
# (146, 'Take Down', 'Normal', 90, 85, 4),
# (147, 'Teleport', 'Psychic', 0, 0, 0),
# (148, 'Thrash', 'Normal', 120, 100, 5),
# (149, 'Thunder', 'Electric', 110, 70, 5),
# (150, 'Thunder Punch', 'Electric', 75, 100, 3),
# (151, 'Thunder Shock', 'Electric', 40, 100, 2),
# (152, 'Thunder Wave', 'Electric', 0, 90, 0),
# (153, 'Thunderbolt', 'Electric', 90, 100, 4),
# (154, 'Toxic', 'Poison', 0, 90, 0),
# (155, 'Transform', 'Normal', 0, 0, 0),
# (156, 'Tri Attack', 'Normal', 80, 100, 4),
# (157, 'Twineedle', 'Bug', 25, 100, 0),
# (158, 'Vine Whip', 'Grass', 45, 100, 2),
# (159, 'Vise Grip', 'Normal', 55, 100, 3),
# (160, 'Water Gun', 'Water', 40, 100, 2),
# (161, 'Waterfall', 'Water', 80, 100, 4),
# (162, 'Whirlwind', 'Normal', 0, 0, 0),
# (163, 'Wing Attack', 'Flying', 60, 100, 3),
# (164, 'Withdraw', 'Water', 0, 0, 0),
# (165, 'Wrap', 'Normal', 15, 90, 0);

# INSERT INTO pokemon_attacks (attack_id, pokemon_id, level) VALUES (1, 43, 1), 
# (1, 44, 1),
# (1, 45, 1),
# (1, 102, 1),
# (1, 103, 1),
# (2, 23, 20),
# (2, 24, 20),
# (2, 43, 4),
# (2, 44, 1),
# (2, 45, 1),
# (2, 69, 23),
# (2, 70, 24),
# (2, 72, 4),
# (2, 73, 1),
# (2, 79, 6),
# (2, 80, 1),
# (3, 72, 32),
# (3, 73, 34),
# (3, 88, 43),
# (3, 89, 46),
# (3, 134, 45),
# (4, 25, 24),
# (4, 26, 1),
# (4, 27, 27),
# (4, 58, 20),
# (4, 59, 1),
# (4, 84, 23),
# (4, 85, 23),
# (4, 107, 28),
# (4, 116, 30),
# (4, 117, 30),
# (4, 123, 32),
# (4, 135, 45),
# (4, 137, 30),
# (4, 144, 20),
# (4, 145, 20),
# (4, 146, 20),
# (4, 147, 20),
# (4, 148, 20),
# (4, 149, 20),
# (5, 54, 34),
# (5, 55, 36),
# (5, 79, 27),
# (5, 80, 27),
# (5, 143, 36),
# (5, 150, 32),
# (5, 151, 10),
# (6, 37, 24),
# (6, 86, 27),
# (6, 87, 27),
# (6, 90, 24),
# (6, 91, 1),
# (6, 134, 30),
# (7, 102, 1),
# (7, 103, 1),
# (8, 72, 28),
# (8, 73, 28),
# (8, 122, 1),
# (8, 150, 64),
# (8, 151, 40),
# (9, 27, 3),
# (11, 7, 12),
# (11, 8, 12),
# (11, 9, 12),
# (11, 23, 9),
# (11, 24, 1),
# (11, 52, 16),
# (11, 53, 16),
# (11, 58, 8),
# (11, 59, 1),
# (11, 88, 7),
# (11, 89, 1),
# (11, 133, 25),
# (11, 134, 1),
# (11, 135, 1),
# (11, 136, 25),
# (11, 143, 16),
# (12, 27, 45),
# (12, 37, 52),
# (12, 38, 1),
# (12, 144, 65),
# (13, 39, 24),
# (13, 40, 1),
# (13, 60, 30),
# (13, 61, 32),
# (13, 62, 1),
# (13, 131, 40),
# (13, 143, 28),
# (14, 104, 7),
# (14, 105, 1),
# (15, 104, 40),
# (15, 105, 48),
# (16, 7, 13),
# (16, 8, 13),
# (16, 9, 13),
# (16, 60, 11),
# (16, 61, 11),
# (16, 98, 1),
# (16, 99, 1),
# (16, 116, 1),
# (16, 117, 1),
# (17, 60, 18),
# (17, 61, 18),
# (17, 62, 1),
# (17, 72, 24),
# (17, 73, 24),
# (17, 116, 25),
# (17, 117, 25),
# (18, 90, 25),
# (19, 107, 1),
# (19, 115, 1),
# (20, 37, 20),
# (20, 92, 1),
# (20, 93, 1),
# (20, 94, 1),
# (20, 126, 20),
# (20, 131, 25),
# (21, 48, 11),
# (21, 49, 11),
# (21, 54, 6),
# (21, 55, 1),
# (21, 79, 12),
# (21, 80, 12),
# (21, 96, 9),
# (21, 97, 1),
# (21, 102, 20),
# (21, 103, 1),
# (21, 144, 5),
# (21, 150, 1),
# (22, 72, 7),
# (22, 73, 1),
# (22, 114, 1),
# (22, 138, 1),
# (22, 139, 1),
# (23, 137, 1),
# (24, 107, 40),
# (24, 145, 55),
# (26, 83, 15),
# (27, 27, 1),
# (27, 28, 1),
# (27, 35, 1),
# (27, 39, 1),
# (27, 40, 1),
# (27, 74, 1),
# (27, 75, 1),
# (27, 76, 1),
# (27, 113, 1),
# (27, 143, 1),
# (28, 27, 33),
# (28, 28, 41),
# (28, 50, 32),
# (28, 51, 36),
# (29, 37, 4),
# (29, 39, 1),
# (29, 40, 1),
# (29, 48, 1),
# (29, 49, 1),
# (29, 54, 15),
# (29, 55, 15),
# (29, 79, 15),
# (29, 80, 15),
# (29, 88, 12),
# (29, 89, 12),
# (29, 96, 5),
# (29, 97, 1),
# (29, 150, 1),
# (30, 115, 34),
# (31, 106, 4),
# (31, 128, 10),
# (31, 135, 25),
# (32, 35, 10),
# (32, 36, 1),
# (32, 39, 17),
# (32, 40, 1),
# (32, 60, 15),
# (32, 61, 15),
# (32, 62, 1),
# (32, 113, 12),
# (32, 122, 11),
# (32, 124, 15),
# (33, 25, 8),
# (33, 26, 1),
# (33, 123, 16),
# (33, 144, 60),
# (34, 39, 44),
# (34, 40, 1),
# (34, 60, 54),
# (34, 61, 66),
# (34, 74, 40),
# (34, 75, 50),
# (34, 76, 50),
# (34, 113, 40),
# (34, 128, 55),
# (34, 133, 50),
# (34, 134, 1),
# (34, 135, 1),
# (34, 136, 1),
# (34, 137, 50),
# (35, 4, 16),
# (35, 5, 17),
# (35, 6, 17),
# (35, 130, 36),
# (35, 147, 15),
# (35, 148, 15),
# (35, 149, 15),
# (36, 92, 48),
# (36, 93, 60),
# (36, 94, 60),
# (36, 144, 50),
# (37, 84, 36),
# (37, 85, 38),
# (37, 145, 35),
# (38, 27, 45),
# (38, 28, 61),
# (38, 50, 40),
# (38, 51, 48),
# (38, 74, 34),
# (38, 75, 40),
# (38, 76, 40),
# (38, 111, 45),
# (38, 112, 47),
# (39, 103, 27),
# (39, 113, 44),
# (40, 4, 4),
# (40, 5, 1),
# (40, 6, 1),
# (40, 37, 1),
# (40, 58, 1),
# (40, 59, 1),
# (40, 126, 1),
# (40, 146, 5),
# (41, 74, 36),
# (41, 75, 44),
# (41, 76, 44),
# (41, 100, 41),
# (41, 101, 47),
# (41, 109, 44),
# (41, 110, 50),
# (42, 37, 52),
# (42, 126, 58),
# (43, 107, 24),
# (43, 126, 28),
# (43, 149, 1),
# (44, 4, 32),
# (44, 6, 46),
# (44, 37, 40),
# (44, 136, 35),
# (45, 50, 44),
# (45, 51, 54),
# (46, 4, 24),
# (46, 5, 30),
# (46, 6, 30),
# (46, 37, 32),
# (46, 38, 1),
# (46, 58, 40),
# (46, 59, 5),
# (46, 126, 46),
# (49, 56, 1),
# (49, 57, 1),
# (49, 106, 1),
# (49, 107, 1),
# (49, 116, 15),
# (49, 117, 15),
# (49, 123, 28),
# (49, 145, 1),
# (50, 84, 9),
# (50, 85, 12),
# (51, 27, 24),
# (51, 28, 26),
# (51, 52, 29),
# (51, 53, 31),
# (51, 54, 9),
# (51, 55, 9),
# (51, 56, 5),
# (51, 57, 5),
# (52, 23, 12),
# (52, 24, 12),
# (53, 1, 1),
# (53, 2, 1),
# (53, 3, 1),
# (53, 4, 1),
# (53, 5, 1),
# (53, 6, 1),
# (53, 25, 1),
# (53, 26, 1),
# (53, 35, 1),
# (53, 50, 4),
# (53, 51, 1),
# (53, 52, 1),
# (53, 53, 1),
# (53, 79, 3),
# (53, 80, 1),
# (53, 84, 1),
# (53, 85, 1),
# (53, 86, 3),
# (53, 87, 1),
# (53, 131, 1),
# (53, 133, 1),
# (53, 134, 1),
# (53, 135, 1),
# (53, 136, 1),
# (54, 1, 6),
# (54, 2, 1),
# (54, 3, 1),
# (54, 43, 1),
# (54, 44, 1),
# (54, 45, 1),
# (54, 69, 7),
# (54, 70, 1),
# (56, 144, 1),
# (56, 146, 1),
# (57, 88, 4),
# (57, 89, 1),
# (58, 23, 41),
# (58, 24, 51),
# (58, 109, 24),
# (58, 110, 24),
# (58, 134, 20),
# (58, 144, 60),
# (59, 79, 21),
# (59, 80, 21),
# (59, 86, 1),
# (59, 87, 1),
# (59, 96, 13),
# (59, 97, 13),
# (59, 128, 20),
# (60, 106, 44),
# (61, 111, 15),
# (61, 112, 15),
# (61, 128, 20),
# (62, 111, 60),
# (62, 112, 68),
# (63, 7, 33),
# (63, 8, 45),
# (63, 9, 49),
# (63, 55, 40),
# (63, 60, 42),
# (63, 61, 48),
# (63, 72, 48),
# (63, 73, 58),
# (63, 90, 48),
# (63, 91, 1),
# (63, 116, 45),
# (63, 117, 51),
# (63, 130, 40),
# (63, 131, 55),
# (63, 134, 50),
# (64, 126, 64),
# (64, 130, 52),
# (64, 147, 60),
# (64, 148, 74),
# (64, 149, 80),
# (65, 19, 16),
# (65, 20, 16),
# (66, 60, 1),
# (66, 61, 1),
# (66, 62, 1),
# (66, 92, 4),
# (66, 93, 1),
# (66, 94, 1),
# (66, 96, 1),
# (66, 97, 1),
# (66, 102, 1),
# (66, 103, 1),
# (66, 144, 15),
# (67, 37, 32),
# (67, 86, 47),
# (67, 87, 55),
# (67, 90, 40),
# (67, 91, 1),
# (67, 131, 45),
# (67, 144, 45),
# (68, 107, 24),
# (69, 84, 40),
# (69, 85, 43),
# (69, 106, 1),
# (70, 56, 8),
# (70, 57, 8),
# (70, 66, 7),
# (70, 67, 1),
# (70, 68, 1),
# (71, 64, 1),
# (71, 65, 1),
# (72, 48, 35),
# (72, 49, 37),
# (73, 1, 9),
# (73, 2, 9),
# (73, 3, 9),
# (73, 102, 10),
# (73, 103, 1),
# (74, 23, 1),
# (74, 24, 1),
# (74, 56, 1),
# (74, 57, 1),
# (74, 58, 1),
# (74, 59, 1),
# (74, 90, 12),
# (74, 91, 1),
# (74, 116, 1),
# (74, 117, 1),
# (74, 123, 1),
# (74, 125, 1),
# (74, 126, 1),
# (74, 130, 1),
# (74, 146, 1),
# (74, 147, 1),
# (74, 148, 1),
# (74, 149, 1),
# (75, 92, 1),
# (75, 93, 1),
# (75, 94, 1),
# (75, 143, 1),
# (76, 25, 40),
# (76, 26, 1),
# (76, 81, 44),
# (76, 82, 52),
# (76, 100, 29),
# (76, 101, 29),
# (76, 113, 36),
# (76, 125, 52),
# (76, 145, 10),
# (77, 124, 40),
# (78, 56, 8),
# (78, 57, 8),
# (78, 106, 8),
# (78, 125, 40),
# (78, 126, 40),
# (79, 96, 21),
# (79, 97, 21),
# (79, 106, 1),
# (79, 122, 8),
# (80, 43, 12),
# (80, 44, 12),
# (80, 45, 1),
# (80, 102, 15),
# (80, 103, 1),
# (81, 106, 32),
# (82, 107, 32),
# (83, 35, 20),
# (83, 36, 1),
# (83, 143, 1),
# (83, 151, 60),
# (84, 39, 28),
# (84, 40, 1),
# (85, 88, 21),
# (85, 89, 21),
# (86, 16, 45),
# (86, 17, 52),
# (86, 18, 56),
# (86, 21, 18),
# (86, 22, 18),
# (87, 27, 3),
# (87, 37, 40),
# (87, 131, 10),
# (87, 144, 1),
# (87, 150, 64),
# (88, 92, 28),
# (88, 93, 30),
# (88, 94, 30),
# (89, 52, 12),
# (89, 53, 12),
# (90, 84, 1),
# (90, 85, 1),
# (90, 145, 1),
# (91, 3, 1),
# (91, 43, 40),
# (91, 44, 50),
# (91, 45, 1),
# (92, 135, 35),
# (93, 88, 1),
# (93, 89, 1),
# (93, 96, 17),
# (93, 97, 17),
# (93, 109, 1),
# (93, 110, 1),
# (94, 1, 15),
# (94, 2, 15),
# (94, 3, 15),
# (94, 43, 14),
# (94, 44, 14),
# (94, 45, 1),
# (94, 48, 13),
# (94, 49, 13),
# (94, 69, 15),
# (94, 70, 15),
# (95, 23, 4),
# (95, 24, 1),
# (95, 27, 3),
# (95, 28, 1),
# (95, 72, 1),
# (95, 73, 1),
# (96, 35, 1),
# (96, 39, 1),
# (96, 40, 1),
# (96, 60, 6),
# (96, 61, 1),
# (96, 88, 1),
# (96, 89, 1),
# (96, 96, 1),
# (96, 97, 1),
# (96, 113, 1),
# (96, 151, 1),
# (97, 48, 17),
# (97, 49, 17),
# (97, 96, 21),
# (97, 97, 21),
# (97, 137, 20),
# (98, 48, 47),
# (98, 49, 55),
# (98, 79, 36),
# (98, 80, 36),
# (98, 96, 37),
# (98, 97, 42),
# (98, 150, 48),
# (98, 151, 100),
# (99, 120, 13),
# (99, 122, 15),
# (99, 150, 1),
# (100, 25, 1),
# (100, 26, 1),
# (100, 37, 8),
# (100, 38, 1),
# (100, 84, 5),
# (100, 85, 1),
# (100, 123, 1),
# (100, 125, 1),
# (100, 133, 10),
# (100, 134, 10),
# (100, 135, 10),
# (100, 136, 10),
# (101, 15, 14),
# (101, 57, 1),
# (101, 84, 8),
# (101, 85, 1),
# (101, 95, 13),
# (101, 104, 23),
# (101, 105, 23),
# (101, 115, 22),
# (101, 128, 5),
# (102, 1, 12),
# (102, 2, 12),
# (102, 3, 12),
# (102, 69, 39),
# (102, 70, 44),
# (102, 71, 1),
# (103, 123, 33),
# (104, 137, 35),
# (104, 144, 40),
# (104, 150, 80),
# (105, 102, 5),
# (105, 103, 1),
# (105, 144, 10),
# (106, 39, 20),
# (106, 40, 1),
# (106, 86, 21),
# (106, 87, 21),
# (106, 128, 40),
# (106, 143, 20),
# (107, 58, 44),
# (107, 59, 1),
# (108, 58, 48),
# (108, 59, 1),
# (109, 59, 1),
# (109, 74, 16),
# (109, 75, 16),
# (109, 76, 16),
# (110, 106, 1),
# (111, 27, 6),
# (111, 28, 1),
# (111, 50, 1),
# (111, 51, 1),
# (111, 133, 5),
# (111, 134, 5),
# (111, 135, 5),
# (111, 136, 5),
# (112, 4, 1),
# (112, 5, 1),
# (112, 6, 1),
# (112, 27, 1),
# (112, 28, 1),
# (112, 50, 1),
# (112, 51, 1),
# (112, 52, 8),
# (112, 53, 1),
# (112, 54, 1),
# (112, 55, 1),
# (112, 56, 1),
# (112, 57, 1),
# (113, 23, 17),
# (113, 24, 17),
# (113, 52, 32),
# (113, 53, 36),
# (113, 54, 21),
# (113, 55, 21),
# (113, 56, 36),
# (113, 57, 44),
# (113, 72, 20),
# (113, 73, 20),
# (113, 81, 24),
# (113, 82, 24),
# (113, 88, 37),
# (113, 89, 37),
# (113, 100, 13),
# (113, 101, 13),
# (113, 125, 24),
# (113, 143, 1),
# (114, 56, 12),
# (114, 57, 15),
# (115, 74, 24),
# (115, 75, 24),
# (115, 76, 24),
# (115, 100, 26),
# (115, 101, 26),
# (115, 109, 28),
# (115, 110, 28),
# (116, 137, 1),
# (117, 35, 1),
# (117, 39, 1),
# (117, 40, 1),
# (117, 113, 16),
# (117, 131, 5),
# (118, 7, 36),
# (118, 8, 50),
# (118, 9, 56),
# (119, 146, 70),
# (120, 69, 47),
# (120, 70, 54),
# (120, 147, 25),
# (120, 148, 25),
# (120, 149, 25),
# (121, 4, 20),
# (121, 5, 24),
# (121, 6, 24),
# (121, 27, 30),
# (121, 28, 36),
# (121, 50, 24),
# (121, 51, 24),
# (121, 52, 36),
# (121, 53, 42),
# (121, 123, 24),
# (122, 1, 15),
# (122, 2, 15),
# (122, 3, 15),
# (122, 43, 18),
# (122, 44, 18),
# (122, 45, 1),
# (122, 48, 29),
# (122, 49, 29),
# (122, 69, 13),
# (122, 70, 13),
# (122, 71, 1),
# (123, 88, 15),
# (123, 89, 15),
# (123, 109, 20),
# (123, 110, 20),
# (124, 109, 4),
# (124, 110, 1),
# (124, 126, 1),
# (124, 136, 20),
# (125, 4, 8),
# (125, 5, 1),
# (125, 6, 1),
# (125, 109, 8),
# (125, 110, 1),
# (125, 116, 5),
# (125, 117, 1),
# (125, 126, 1),
# (126, 113, 44),
# (127, 1, 36),
# (127, 2, 50),
# (127, 3, 58),
# (127, 102, 55),
# (127, 103, 1),
# (128, 81, 17),
# (128, 82, 17),
# (128, 100, 4),
# (128, 101, 1),
# (129, 91, 13),
# (129, 139, 1),
# (130, 35, 1),
# (130, 129, 1),
# (130, 130, 1),
# (132, 111, 25),
# (132, 112, 25),
# (136, 43, 16),
# (136, 44, 16),
# (136, 45, 1),
# (136, 48, 23),
# (136, 49, 23),
# (136, 69, 17),
# (136, 70, 17),
# (136, 100, 6),
# (136, 101, 6),
# (137, 62, 1),
# (137, 127, 44),
# (140, 48, 5),
# (140, 49, 1),
# (140, 72, 12),
# (140, 73, 12),
# (140, 81, 4),
# (140, 82, 1),
# (140, 90, 20),
# (140, 91, 1),
# (141, 72, 40),
# (141, 73, 46),
# (141, 79, 30),
# (141, 80, 30),
# (142, 27, 21),
# (142, 28, 21),
# (142, 100, 20),
# (142, 101, 20),
# (142, 125, 12),
# (142, 133, 20),
# (142, 134, 1),
# (142, 135, 1),
# (142, 136, 1),
# (142, 150, 1),
# (143, 27, 39),
# (143, 28, 51),
# (143, 84, 33),
# (143, 85, 34),
# (143, 123, 44),
# (144, 1, 1),
# (144, 2, 1),
# (144, 3, 1),
# (144, 7, 1),
# (144, 8, 1),
# (144, 9, 1),
# (144, 48, 1),
# (144, 49, 1),
# (144, 74, 1),
# (144, 75, 1),
# (144, 76, 1),
# (144, 79, 1),
# (144, 80, 1),
# (144, 81, 1),
# (144, 82, 1),
# (144, 90, 1),
# (144, 91, 1),
# (144, 100, 1),
# (144, 101, 1),
# (144, 106, 1),
# (144, 107, 1),
# (144, 109, 1),
# (144, 110, 1),
# (144, 111, 1),
# (144, 112, 1),
# (144, 128, 1),
# (144, 129, 15),
# (144, 130, 1),
# (144, 133, 1),
# (144, 134, 1),
# (144, 135, 1),
# (144, 136, 1),
# (144, 137, 1),
# (144, 143, 1),
# (145, 7, 1),
# (145, 8, 1),
# (145, 9, 1),
# (145, 25, 1),
# (145, 26, 1),
# (145, 37, 1),
# (145, 38, 1),
# (145, 54, 1),
# (145, 55, 1),
# (145, 111, 1),
# (145, 112, 1),
# (145, 113, 4),
# (145, 128, 1),
# (145, 133, 1),
# (145, 134, 1),
# (145, 135, 1),
# (145, 136, 1),
# (146, 1, 21),
# (146, 2, 25),
# (146, 3, 25),
# (146, 58, 36),
# (146, 59, 1),
# (146, 86, 37),
# (146, 87, 39),
# (146, 111, 40),
# (146, 112, 40),
# (146, 113, 24),
# (146, 133, 40),
# (146, 134, 1),
# (146, 135, 1),
# (146, 136, 1),
# (148, 52, 44),
# (148, 56, 29),
# (148, 57, 30),
# (148, 84, 43),
# (148, 85, 50),
# (148, 128, 50),
# (148, 130, 48),
# (149, 25, 44),
# (149, 26, 1),
# (149, 125, 58),
# (149, 135, 50),
# (149, 145, 55),
# (150, 74, 22),
# (150, 75, 22),
# (150, 76, 22),
# (150, 107, 24),
# (150, 125, 28),
# (150, 149, 1),
# (151, 25, 1),
# (151, 26, 1),
# (151, 81, 1),
# (151, 82, 1),
# (151, 100, 4),
# (151, 101, 1),
# (151, 125, 1),
# (151, 137, 15),
# (151, 145, 5),
# (152, 25, 4),
# (152, 26, 1),
# (152, 81, 8),
# (152, 82, 1),
# (152, 125, 20),
# (152, 135, 20),
# (152, 145, 1),
# (152, 147, 10),
# (152, 148, 1),
# (152, 149, 1),
# (153, 25, 36),
# (153, 26, 5),
# (153, 125, 46),
# (154, 43, 24),
# (154, 44, 26),
# (154, 45, 1),
# (154, 88, 26),
# (154, 89, 26),
# (154, 109, 36),
# (154, 110, 38),
# (155, 132, 1),
# (155, 151, 80),
# (156, 51, 1),
# (156, 137, 45),
# (157, 15, 1),
# (158, 1, 3),
# (158, 2, 1),
# (158, 3, 1),
# (158, 69, 1),
# (158, 70, 1),
# (158, 71, 1),
# (160, 7, 3),
# (160, 8, 1),
# (160, 9, 1),
# (160, 54, 3),
# (160, 55, 1),
# (160, 60, 1),
# (160, 61, 1),
# (160, 72, 1),
# (160, 73, 1),
# (160, 79, 6),
# (160, 80, 1),
# (160, 90, 1),
# (160, 91, 1),
# (160, 116, 1),
# (160, 117, 1),
# (160, 131, 1),
# (161, 130, 21),
# (163, 123, 12),
# (163, 146, 15),
# (163, 149, 1),
# (164, 7, 6),
# (164, 8, 1),
# (164, 9, 1),
# (164, 80, 1),
# (164, 90, 4),
# (164, 91, 1),
# (165, 23, 1),
# (165, 24, 1),
# (165, 69, 11),
# (165, 70, 1),
# (165, 72, 8),
# (165, 73, 1),
# (165, 147, 1),
# (165, 148, 1),
# (165, 149, 1);